#!/bin/bash
 
APP_NAME="hydra-monitor-server"
APP_FILENAME="monitor-server"
APP_PID="/$GOPATH/bin/$APP_FILENAME.pid"
APP_PATH="/$GOPATH/bin/$APP_FILENAME"
 
TMP_FILE="/tmp/status_$APP_FILENAME"
 
SUCCESS="[\\033[1;32mSuccess\\033[0m]"
FAILURE="[\\033[1;31mFailure\\033[0;39m]"
 
S_STATUS[0]="\\033[1;32mRunning\\033[0m"
S_STATUS[1]="\\033[1;31mNot Running\\033[0m"
S_STATUS[2]="\\033[1;31mStopped incorrectly\\033[0m"
S_STATUS[9]="\\033[1;31mUnknown\\033[0m"
 
start() {
	checkpid
	STATUS=$?
	echo -n "Starting $APP_NAME: "
 
	if [ $STATUS -ne 0 ]; then
		nohup $APP_PATH/$APP_FILENAME > $APP_PATH/$APP_FILENAME.out 2> $APP_PATH/$APP_FILENAME.err < /dev/null & 		echo $! > $APP_PID
		echo -e $SUCCESS
	else
		echo -e $FAILURE
		echo "Check status for details."
	fi
}
 
stop() {
	checkpid
	local STATUS=$?
	echo -n "Stopping $APP_NAME: "
 
	if [ $STATUS -eq 0 ]; then
		kill `cat $APP_PID`
		rm $APP_PID
		echo -e $SUCCESS
	else
		echo -e $FAILURE
		echo "Check status for details."
	fi
}
 
checkpid() {
    local STATUS=9
 
    if [ -f $APP_PID ]; then
		ps -Fp `cat $APP_PID` | grep $APP_FILENAME > $TMP_FILE
		if [ -f $TMP_FILE -a -s $TMP_FILE ]; then
			STATUS=0
		else
			STATUS=2
		fi
		rm -f $TMP_FILE
	else
		STATUS=1
	fi
 
	return $STATUS
}
 
checkstatus() {
	checkpid
	local CODE=$?
 
	echo -n "$APP_NAME Status: "
	echo -e ${S_STATUS[CODE]}
}
 
case "$1" in
	'start')
		start
		;;
	'stop')
		stop
		;;
	'restart')
		stop
		start
		;;
	'status')
		checkstatus
		;;
	*)
		echo "Usage: $0 { start | stop | restart | status }"
		exit 1
		;;
esac
 
exit 0